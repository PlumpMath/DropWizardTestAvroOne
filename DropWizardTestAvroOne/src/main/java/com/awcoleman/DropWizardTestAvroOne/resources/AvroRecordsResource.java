package com.awcoleman.DropWizardTestAvroOne.resources;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

import io.dropwizard.auth.Auth;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.avro.Schema;
import org.apache.avro.generic.GenericDatumWriter;
import org.apache.avro.io.DatumWriter;
import org.apache.avro.io.EncoderFactory;
import org.apache.avro.io.JsonEncoder;
import org.apache.avro.reflect.ReflectData;
import org.apache.avro.specific.SpecificRecordBase;
import org.skife.jdbi.v2.DBI;

import com.awcoleman.DropWizardTestAvroOne.DWTestAvroOneConfiguration;
import com.awcoleman.DropWizardTestAvroOne.dao.AvroRecordDAO;

/*
 * Return JSON data for Set of Avro SpecificRecord(s)
 * 
 */
@Path("/avrorecords")
@Produces(MediaType.APPLICATION_JSON)
public class AvroRecordsResource {
	
	@SuppressWarnings("rawtypes")
	private final static Class avroSRClass = com.awcoleman.examples.DropWizardTestAvroOne.avro.TestRecOne.class;
	
	private final AvroRecordDAO avrorecDao;

	DWTestAvroOneConfiguration c;
	
	public AvroRecordsResource(DBI jdbi, DWTestAvroOneConfiguration ic) {
		avrorecDao = jdbi.onDemand(AvroRecordDAO.class);
		c = ic;
	}

	@GET
	@Path("/{datasetid}")
	public Response getCallDataList(@PathParam("datasetid") String datasetid, @Auth Boolean isAuthenticated) {

		//retrieve the records that match the with the provided dataset id
		Set<SpecificRecordBase> avrorecs = avrorecDao.getDatasetById(datasetid,c.getAvrotablename(),c.getAvrokeycol());

		Response retResp=null;
		if (avrorecs != null ) {
			HashSet<SpecificRecordBase> avrorecswrapper = new HashSet<SpecificRecordBase>();
			avrorecswrapper.addAll(avrorecs);

			//Use temporary hack method to create String holding JSON representation of Set of Avro SpecificRecords
			String json = specificRecordSetToJSONarray(avrorecswrapper,avroSRClass);

			retResp = Response.ok(json, MediaType.APPLICATION_JSON).build();
		} else {
			//if no records in set, create empty set so JSON output is similar to JSON with records (Could just change this to send "[]").
			HashSet<ArrayList<String>> emptywrapper = new HashSet<ArrayList<String>>();
			ArrayList<String> emptyInner = new ArrayList<String>();
			emptywrapper.add(emptyInner);
			retResp = Response.ok(emptywrapper).build();
		}
		return retResp;
	}

	/*
	 * Temporary hack.
	 * Log-term figure out how to send Avro SpecificRecords (objects code-generated by avro from schema)
	 * to Jackson like other objects (Currently the auto-added 'schema' variable trips up Jackson)
	 * 
	 */
	@SuppressWarnings("rawtypes")
	public static String specificRecordSetToJSONarray(HashSet<SpecificRecordBase> avrorecswrapper, Class avroClass) {
		String retjson=null;

		//Init
		Schema schema = ReflectData.get().getSchema(avroClass);
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		DatumWriter<Object> writer = new GenericDatumWriter<Object>(schema);
		JsonEncoder jsonEncoder;
		try {
			jsonEncoder = EncoderFactory.get().jsonEncoder(schema, out, false);

			//Json array start
			out.write("[".getBytes());

			//Individual specific record(s)
			String currentSeparator = "";
			for (SpecificRecordBase avrorec : avrorecswrapper) {
				//Write object separator (comma) (or blank for first pass)
				out.write(currentSeparator.getBytes());
				currentSeparator = ",";
				
				writer.write(avrorec, jsonEncoder);
				jsonEncoder.flush();
			}

			//Json array end
			out.write("]".getBytes());

			jsonEncoder.flush();
			retjson = new String(out.toByteArray(),"UTF-8");
		} catch (IOException e) {
			return "[]"; //return empty json array if issues
		}

		return retjson;
	}
}
